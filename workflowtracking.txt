
Collision mask information:
1: Basic physics layer
2: Bullet interact raycast layer
3: Player interact raycast layer (npcs, pickups)
4: Literally JUST the player
5: Environment only


Importing new weapon model:
	
	1: import the glb
	2: drag into scene (optional?)
	3: re-import the mesh
	4: wait a bit, for reasons. (how long?)
	5: move the texture into the right folder
	5: do NOT touch anything else

Adding a new weapon:
	1: import weapon model (see above)
	2: import gunshot and reload sound, if necessary
	3: in playerinvenmanager, set the starter weapon (NOT hands) to new firearm_info
	4: fill out all the fields
	6: test it out, will require several cycles to get the positioning right.

-----------\
=======+=======> DIRECTORY OF WHERE THINGS ARE:
-----------/

====+====> MISC:
--Scripts/weaponsystem/invenmanager_parent: the common parent class between the sylph
	invenmanager and the player invenmanager. Has a good chunk of code in it, so
	read through it if you're doing anything that touches those classes
	Note that the player and sylph versions are in the associated folders.

====+====> PLAYER ASSOCIATED
--Scripts/player: basically everything in here is used a lot, but most importantly are:
--Scripts/player/invenmanager_player: Acts as an in-between for the player and weapon instances.
--Scripts/player/playermovementinput: Almost everything related to movement and IO is handled here

====+====> WEAPON SYSTEM:
--Scripts/weaponsystem/gun_basic_instance: all the functionality of firearms is in here
--Resources/weaponresources: All of the datasheets for all weapons are in here
--Scripts/weaponsystem/ weapon_parent and wep_instance_parent: boilerplate classes that weapon
	datasheets and weapon instances inherit from. Extend if you're making your own functionality.

====+====> SYLPH/NEURAL NETWORKS:
--Scripts/archonscript: The "archon" is the manager for sylph training. Walk up to it and press e
	if you want to start a training cycle. Will also score sylphs and decide which one gets mutated
--Scripts/sylph scripts/sylph_mind: A manager for the neural network. Processes input and handles output.
	A similar script is sylph_body_controller, which has much less functionality.
--scripts/sylph scripts/ layer_class and network_class: Contain the actual classes used for neural nets.
	Network_class has all the utility functions in it. 
--Resources/txt files / sylph tests: Folder where all of the saved sylphs go. 

Other places are as follow:
 resources/weaponresources contains all the templates for implemented weapons
 Models/glbs and textures for the raws of all imported models
 Scenes/player associated/player for the actual player scene
 Scenes/environ for the test environment I have the player in

-----------\
=======+=======> CURRENT DEV CYCLE:
-----------/

Change single round reloading logic off of shotguns and onto heldweapon instance, use a boolean
to determine which is which.
Weapon "jump" as primitive animation when fired.
Whenever recoil is applied, pick a random point from default, teleport there, use
current recoil value to determine how you should move back.
Each time the gun is fired, this new point should change. 
^^ Use this to springboard into having ADS also lerp, and have a deadtime when you cant shot 
as one toggles.


-----------\
=======+=======> FUTURE PLANS:
-----------/

Players should take more time to get up to speed. Also revert the friction to default values so we can bhop again.
ADD BULLET VARIANCE!!! Just make it a toggle!
Autolean when ADS + ADS makes the camera zoom in
Change degubby reload and fire sounds to be distinctly not gunshots. cmon. no excuses.
Watch inventory system video. Make simple shitty top bar for player inv and placeholder one for stims

====+====> KEY:
	+: Easy
	-: Hard
	*: Important (to current course of dev plans)
	&: Unimportant


Sylph maintenance:

Before you do ANYTHING with the sylphs again, write a function that takes a node and sets its
immediate weights/biases to be completely neutral. otherwise you're going to undo everything.

After making Sylph kinematic controller, take sample snapshots of input (looking at target, looking
above target, not looking at target, far from target) and use those so you can do SGD pre-training.

Randf function may have weird weights due to how floats work, look into it
Look into mutating by "pulses"-- rather than shooting a shotgun into the network,
take a random input, and for x of outputs, mutate those, than take 1-2 from the mutated and pulse again

It looks like we're sabotaging ourselves with memory caching for weights and biases. 
Consider swapping the traversal order to go row by row on all traversals
Reimport sylph head but make sure it's actually centered this time, doofus.


====+====> FUNCTIONAL:

crosshair changes with move speed **
"button-like" dialogue trees
Tweak the friction values to allow for some airstrafing, change the wishspeed allowance to not
be too absurdly lenient, though.
Change the player step code to be the better, suggested version. Steppers work badly.


====+====> EXPERIENTIAL:

re-add FOV changing with speed, but make it steppy to prevent jitters
footstep sounds +++
fix weapon clipping +++ &
Scrolling chat

Sylph and playermodel bodies v2, but test with the millian prior

Millian porcelaindoll variant
Garry's mod mixed media renders START WITH WE'RE TOGETHER NOW

Archon intro ditty:
low high bitlower medium - - - - - - high low
low high bitlower - - + verlow high lowwww
Archon option buttons
